// SPDX-License-Identifier: UNLICENSED
pragma solidity =0.8.24;


contract Registration{
   
    address FDA;   //0x5B38Da6a701c568545dCfcB03FcB875f56beddC4
   
   
    mapping(address=>bool) Manufacturer; // 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2
    mapping(address=>bool) Distributer; // 0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db
    mapping(address=>bool) HPP; //0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB
   
    modifier onlyFDA{
      require(msg.sender == FDA,
      "Sender not authorized."
      );
      _;
    }  
   
    constructor() {
        FDA=msg.sender;
    }
   
    function RegisterManufacturer(address m) public onlyFDA{
        require(!Manufacturer[m],
        "Manufactuer exists already"
        );
       
        Manufacturer[m]=true;
    }
   
    function RegisterDistributer(address d) public onlyFDA{
        require(!Distributer[d],
        "Distributer exists already"
        );
       
        Distributer[d]=true;
    }
   
    function RegisterHPP(address h) public onlyFDA{
        require(!HPP[h],
        "HPP exists already"
        );
       
        HPP[h]=true;
    }
   
    function isFDA(address f) public view returns(bool){
        return (FDA==f);
    }
   
    function ManufacturerExists(address m) public view returns(bool){
        return Manufacturer[m];
    }
   
    function DistributerExists(address d) public view returns(bool){
        return Distributer[d];
    }
   
    function HPPExists(address h) public view returns(bool){
        return HPP[h];
    }
}
contract RecallHandler{
    uint InitTime;
    uint CompTime;
    bool Penalty;
    address payable NHTSA;
    
    Registration RegistrationContract;


enum status{
    Pending,
    Accepted,
    Rejected,
    Received
}

struct DefectComplaintRequestdetails{
    address receiver;
    address requestor;
    string MedicineID;
    string MedicineName;
    string SerialNumber;
    string BatchNumber;
    
    status DefectComplaintRequestdetailsStatus;
    
}
    
